import { useState, useEffect } from 'react';
import { Post, PostState, AIGeneratedImage } from '../../types/posts';
import { supabase } from '../../lib/supabase';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '../ui/dialog';
import { Button } from '../ui/button';
import { Textarea } from '../ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '../ui/select';
import { Input } from '../ui/input';
import { format } from 'date-fns';
import { Calendar as CalendarIcon, Clock, Image as ImageIcon, Brain, Sparkles } from 'lucide-react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';
import { Dialog as DialogPrimitive } from '@radix-ui/react-dialog';
import { GoogleGenerativeAI } from '@google/generative-ai';
import ReactMarkdown from 'react-markdown';
import { usePremiumActions } from '../../hooks/usePremiumActions';
import { motion } from 'framer-motion';
import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';
import { Calendar } from '../ui/calendar';
import { es } from 'date-fns/locale';
import { cn } from '../../lib/utils';

// Mover la inicializaci√≥n dentro de una funci√≥n para evitar problemas con import.meta
const getGoogleAI = () => {
  const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY);
  return genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
};

const MAX_OPTIMIZATIONS_PER_POST = 3;
const MAX_MONTHLY_OPTIMIZATIONS = 30;

interface PostEditorProps {
  post?: Post | null;
  initialDate?: string; // Fecha inicial para un nuevo post
  onClose: () => void;
  onSave: () => void;
  allPosts?: Post[]; // Lista de todos los posts para identificar fechas ocupadas
}

const imageStyles = [
  { id: 'realistic', name: 'Realista', preview: '/styles/realistic.png' },
  { id: '3d', name: 'Animaci√≥n 3D', preview: '/styles/3d.png' },
  { id: 'pixar', name: 'Estilo Pixar', preview: '/styles/pixar.png' },
  { id: 'anime', name: 'Anime', preview: '/styles/anime.png' },
  { id: 'watercolor', name: 'Acuarela', preview: '/styles/watercolor.png' },
];

export default function PostEditor({ post, initialDate, onClose, onSave, allPosts = [] }: PostEditorProps) {
  const [content, setContent] = useState(post?.content || '');
  const [state, setState] = useState<PostState>(post?.state || 'borrador');
  const [scheduledDate, setScheduledDate] = useState(
    post?.scheduled_datetime
      ? format(new Date(post.scheduled_datetime), 'yyyy-MM-dd')
      : initialDate || ''
  );
  const [scheduledTime, setScheduledTime] = useState(
    post?.scheduled_datetime
      ? format(new Date(post.scheduled_datetime), 'HH:mm')
      : ''
  );
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [showScheduler, setShowScheduler] = useState(false);
  const [imagePrompt, setImagePrompt] = useState('');
  const [selectedStyle, setSelectedStyle] = useState(imageStyles[0].id);
  const [generatedImages, setGeneratedImages] = useState<AIGeneratedImage[]>([]);
  const [activeTab, setActiveTab] = useState<'content' | 'image'>('content');
  const [optimizedContent, setOptimizedContent] = useState<string | null>(null);
  const [originalContent, setOriginalContent] = useState<string | null>(null);
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [optimizationError, setOptimizationError] = useState<string | null>(null);
  const [showSaveDialog, setShowSaveDialog] = useState(false);
  const [isClosing, setIsClosing] = useState(false);
  const [showComparison, setShowComparison] = useState(false);
  const {
    registerAction,
    checkPostOptimizationLimit,
    loading: actionLoading,
    error: actionError
  } = usePremiumActions();
  const [currentPostId, setCurrentPostId] = useState<string | null>(post?.id || null);
  const [isNewPostCreated, setIsNewPostCreated] = useState(false);

  // Si se proporciona una fecha inicial, mostrar autom√°ticamente el programador
  useEffect(() => {
    if (initialDate && !post) {
      setState('planificado');
    }
  }, [initialDate, post]);

  // Efecto para cambiar el estado a "planificado" cuando se selecciona una fecha
  useEffect(() => {
    if (scheduledDate && state !== 'planificado') {
      setState('planificado');
    }
  }, [scheduledDate]);

  const handleGenerateImage = async () => {
    // Aqu√≠ ir√≠a la l√≥gica de generaci√≥n de im√°genes
    console.log('Generando imagen con:', { imagePrompt, selectedStyle });
  };

  const handleSave = async () => {
    setIsSaving(true);
    setError(null);
    try {
      // Si hay fecha pero no hora, establecemos una hora predeterminada (00:00)
      const finalScheduledTime = scheduledDate && !scheduledTime ? '00:00' : scheduledTime;
      
      const postData = {
        content,
        state,
        scheduled_datetime: state === 'planificado' && scheduledDate
          ? new Date(`${scheduledDate}T${finalScheduledTime || '00:00'}`).toISOString()
          : null,
        user_id: (await supabase.auth.getUser()).data.user?.id
      };

      if (currentPostId) {
        // Actualizar post existente
        const { error } = await supabase
          .from('posts')
          .update(postData)
          .eq('id', currentPostId);

        if (error) throw error;
      } else {
        // Crear nuevo post
        const { data: newPost, error } = await supabase
          .from('posts')
          .insert([postData])
          .select()
          .single();

        if (error) throw error;
        if (newPost) {
          setCurrentPostId(newPost.id);
          setIsNewPostCreated(true);
        }
      }

      // Mostrar mensaje de √©xito temporal
      setSuccessMessage("‚úÖ Post guardado correctamente");
      setTimeout(() => setSuccessMessage(null), 3000);
      
      onSave();
    } catch (error: any) {
      console.error('Error al guardar el post:', error);
      setError(error.message || 'Error al guardar la publicaci√≥n');
    } finally {
      setIsSaving(false);
    }
  };

  const handleOptimizeWithAI = async () => {
    try {
      // Verificar que hay contenido para optimizar
      if (content.trim() === '') {
        setOptimizationError('No hay contenido para optimizar. Por favor, escribe algo primero.');
        return;
      }

      // Verificar l√≠mites antes de proceder
      const canOptimize = await checkPostOptimizationLimit(currentPostId || 'new');
      if (!canOptimize) {
        setOptimizationError('Has alcanzado el l√≠mite de optimizaciones permitido para este post o para tu plan');
        return;
      }

      setIsOptimizing(true);
      setOptimizationError(null);
      // Guardar el contenido original antes de optimizar
      setOriginalContent(content);

      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError) throw userError;
      if (!user) throw new Error('Usuario no autenticado');

      // Si el post no existe, guardarlo primero como borrador temporal
      let postId = currentPostId;
      
      if (!postId) {
        try {
          console.log('üíæ Guardando borrador temporal antes de optimizar...');
          const postData = {
            content,
            state: 'borrador', // Siempre guardar como borrador inicialmente
            scheduled_datetime: state === 'planificado' && scheduledDate && scheduledTime
              ? new Date(`${scheduledDate}T${scheduledTime}`).toISOString()
              : null,
            user_id: user.id
          };

          const { data: newPost, error: saveError } = await supabase
            .from('posts')
            .insert([postData])
            .select()
            .single();

          if (saveError) throw saveError;
          if (!newPost) throw new Error('Error al guardar el post');

          postId = newPost.id;
          setCurrentPostId(postId); // Actualizar el estado con el nuevo ID
          setIsNewPostCreated(true);
          console.log('üìù Borrador temporal guardado con ID:', postId);
          
          // Mostrar mensaje informativo
          setSuccessMessage("Se ha guardado un borrador temporal para optimizar");
          setTimeout(() => setSuccessMessage(null), 3000);
        } catch (error: any) {
          console.error('‚ùå Error al guardar el borrador temporal:', error);
          throw new Error('Error al guardar el post: ' + error.message);
        }
      } else {
        console.log('üîÑ Optimizando post existente con ID:', postId);
        
        // Si hay cambios pendientes, actualizar el post antes de optimizarlo
        if (hasChanges()) {
          console.log('üìù Actualizando post existente antes de optimizar...');
          const postData = {
            content,
            state,
            scheduled_datetime: state === 'planificado' && scheduledDate && scheduledTime
              ? new Date(`${scheduledDate}T${scheduledTime}`).toISOString()
              : null,
            user_id: user.id
          };
          
          const { error: updateError } = await supabase
            .from('posts')
            .update(postData)
            .eq('id', postId);
            
          if (updateError) {
            console.error('‚ùå Error al actualizar el post:', updateError);
            throw updateError;
          }
          
          console.log('‚úÖ Post actualizado antes de optimizar');
        }
      }

      // Registrar la acci√≥n premium
      const actionRegistered = await registerAction('post_optimization', {
        post_id: postId,
        content_length: content.length
      });

      if (!actionRegistered) {
        throw new Error('Error al registrar la acci√≥n premium');
      }

      console.log('‚ú® Acci√≥n premium registrada');

      // Obtener recomendaciones y posts
      const { data: recentRecommendation, error: recError } = await supabase
        .from('recommendations')
        .select('*')
        .eq('user_id', user.id)
        .order('date_generated', { ascending: false })
        .limit(1)
        .single();

      if (recError && recError.code !== 'PGRST116') throw recError;

      const oneYearAgo = new Date();
      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);

      const { data: topPosts, error: postsError } = await supabase
        .from('linkedin_posts')
        .select('*')
        .eq('user_id', user.id)
        .gte('date', oneYearAgo.toISOString())
        .order('views', { ascending: false })
        .limit(10);

      if (postsError) throw postsError;

      // Generar el prompt
      const prompt = `Eres un experto en comunicaci√≥n digital y marketing de contenidos con amplia experiencia en LinkedIn. Tu tarea es optimizar un post de un usuario manteniendo su tono personal y aut√©ntico mientras incorporas las mejores pr√°cticas de engagement.

<post_original>
${content}
</post_original>

<recomendaciones_engagement>
${JSON.stringify(recentRecommendation || {}, null, 2)}
</recomendaciones_engagement>

<posts_del_autor>
${JSON.stringify(topPosts || [], null, 2)}
</posts_del_autor>

Para crear una versi√≥n mejorada del post, deber√°s seguir las instrucciones de <recomendaciones_engagement>, as√≠ como unas pautas adicionales:
- Mantener el mensaje clave del post original
- Conservar el tono habitual del autor en base a sus posts anteriores que encontrar√°s en <posts_del_autor>
- Incorporar al menos una pregunta abierta que invite a la participaci√≥n
- Utilizar emojis estrat√©gicamente para mejorar la legibilidad (solo si el autor los utiliza habitualmente en sus posts)
- Estructurar el contenido con espaciado y formato visual atractivo
- Incluir una llamada a la acci√≥n claro al final
- Asegurar que el contenido sea conciso y directo
- Respeta siempre el idioma original en el que suele publicar el usuario, aunque parte del contenido del borrador de la nueva publicaci√≥n est√© en otro idioma. 

Para validar la calidad del contenido optimizado, verifica que:
- Mantiene la voz y personalidad del autor original
- No excede la longitud recomendada
- Incluye elementos visuales (emojis) de manera efectiva
- Tiene una estructura clara y f√°cil de leer
- Genera oportunidades de interacci√≥n
- Conserva el valor y la utilidad del contenido original

Proporciona el post mejorado en formato texto, listo para ser publicado en LinkedIn, manteniendo los saltos de l√≠nea y emojis apropiados.`;

      console.log('üìù Prompt generado:', prompt);

      // Inicializar el modelo dentro de la funci√≥n
      const model = getGoogleAI();
      console.log('ü§ñ Modelo inicializado, enviando prompt...');

      const result = await model.generateContent(prompt);
      console.log('‚ú® Respuesta recibida:', result);

      const optimizedText = result.response.text();
      console.log('üìÑ Texto optimizado:', optimizedText);

      setOptimizedContent(optimizedText);
      setShowComparison(true);

    } catch (error: any) {
      console.error('‚ùå Error al optimizar:', error);
      setOptimizationError(
        error.message ||
        error.details ||
        'Error al optimizar el contenido'
      );
    } finally {
      setIsOptimizing(false);
    }
  };

  const handleAcceptOptimization = async () => {
    if (!optimizedContent) return;

    try {
      setIsSaving(true);
      // Usar el ID almacenado en el estado
      const postId = currentPostId;
      if (!postId) {
        throw new Error('No se encontr√≥ el ID del post');
      }

      // Guardar la optimizaci√≥n en la tabla de historial
      const { error: optimizationError } = await supabase
        .from('post_optimizations')
        .insert([{
          post_id: postId,
          user_id: (await supabase.auth.getUser()).data.user?.id,
          original_content: originalContent || content,
          optimized_content: optimizedContent
        }]);

      if (optimizationError) throw optimizationError;

      // Actualizar el contenido en el estado local
      setContent(optimizedContent);
      
      // Actualizar el post con el nuevo contenido
      const { error: updateError } = await supabase
        .from('posts')
        .update({ 
          content: optimizedContent,
          // Si es un post nuevo creado como borrador, mantener el estado que el usuario haya seleccionado
          state: state
        })
        .eq('id', postId);

      if (updateError) throw updateError;
      
      // Cerrar la comparaci√≥n
      setShowComparison(false);
      setOptimizedContent(null);
      setOriginalContent(null);
      
      console.log('‚úÖ Post actualizado correctamente con el contenido optimizado');
      // Mostrar mensaje de √©xito temporal
      setSuccessMessage("‚úÖ Optimizaci√≥n aplicada correctamente");
      // Limpiar el mensaje despu√©s de 3 segundos
      setTimeout(() => setSuccessMessage(null), 3000);

    } catch (error: any) {
      console.error('Error al guardar la optimizaci√≥n:', error);
      setError('Error al guardar la optimizaci√≥n: ' + error.message);
    } finally {
      setIsSaving(false);
    }
  };

  const handleDiscardOptimization = () => {
    setShowComparison(false);
    setOptimizedContent(null);
    setOriginalContent(null);
    
    // Si es un post nuevo que se cre√≥ solo para optimizar y el usuario descarta la optimizaci√≥n,
    // mostrar un mensaje informativo
    if (isNewPostCreated && !post) {
      setSuccessMessage("Se ha guardado un borrador con tu contenido original");
      setTimeout(() => setSuccessMessage(null), 3000);
    }
  };

  const hasChanges = () => {
    if (!post) {
      return content.trim() !== '' || state !== 'borrador' || scheduledDate !== '' || scheduledTime !== '';
    }
    return content !== post.content ||
      state !== post.state ||
      scheduledDate !== (post.scheduled_datetime ? format(new Date(post.scheduled_datetime), 'yyyy-MM-dd') : '') ||
      scheduledTime !== (post.scheduled_datetime ? format(new Date(post.scheduled_datetime), 'HH:mm') : '');
  };

  const handleClose = () => {
    if (hasChanges()) {
      setShowSaveDialog(true);
      setIsClosing(true);
    } else {
      onClose();
    }
  };

  const handleConfirmClose = async (shouldSave: boolean) => {
    if (shouldSave) {
      await handleSave();
    }
    setShowSaveDialog(false);
    if (isClosing) {
      onClose();
    }
  };

  // Funci√≥n para determinar si una fecha tiene posts programados
  const hasScheduledPostsOnDate = (date: Date) => {
    try {
      // Convertir la fecha a formato YYYY-MM-DD para comparar solo la fecha sin la hora
      const dateString = format(date, 'yyyy-MM-dd');
      
      return allPosts.some(p => {
        if (!p.scheduled_datetime) return false;
        const postDate = format(new Date(p.scheduled_datetime), 'yyyy-MM-dd');
        return postDate === dateString && (currentPostId !== p.id); // Excluir el post actual
      });
    } catch (error) {
      console.error('Error al verificar posts programados:', error);
      return false;
    }
  };

  return (
    <>
      <Dialog open={true} onOpenChange={handleClose}>
        <DialogContent className="sm:max-w-[800px] p-0 overflow-hidden bg-white shadow-lg">
          <div className="flex h-full flex-col">
            {/* Header */}
            <div className="px-6 pt-4 pb-2 border-b">
              <h2 className="text-xl font-medium text-gray-800 ">
                {post ? 'Editar Publicaci√≥n' : 'Nueva Publicaci√≥n'}
              </h2>
              <p className="text-sm text-gray-500 mt-1 ">
                {post ? 'Modifica los detalles de tu publicaci√≥n' : 'Crea una nueva publicaci√≥n para LinkedIn'}
              </p>
            </div>
            
            {/* Tabs */}
            <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'content' | 'image')} className="flex-1 flex flex-col">
              <div className="border-b px-6">
                <TabsList className="h-10 w-full bg-transparent border-b-0 justify-start gap-6 p-0">
                  <TabsTrigger 
                    value="content" 
                    className="data-[state=active]:border-b-2 data-[state=active]:border-blue-600 data-[state=active]:shadow-none rounded-none px-0 py-2 h-10 bg-transparent text-gray-600 data-[state=active]:text-blue-600 font-medium "
                  >
                    Contenido
                  </TabsTrigger>
                  <TabsTrigger 
                    value="image" 
                    className="data-[state=active]:border-b-2 data-[state=active]:border-blue-600 data-[state=active]:shadow-none rounded-none px-0 py-2 h-10 bg-transparent text-gray-600 data-[state=active]:text-blue-600 font-medium "
                  >
                    Imagen
                  </TabsTrigger>
                </TabsList>
              </div>

              <TabsContent value="content" className="p-6 flex-1 overflow-y-auto">
                <div className="space-y-6">
                  {/* Mensajes de √©xito o error */}
                  {error && (
                    <div className="text-sm text-red-500 bg-red-50 p-3 rounded-md border border-red-100 flex items-center ">
                      <span className="mr-2">‚ö†Ô∏è</span> {error}
                    </div>
                  )}

                  {successMessage && (
                    <div className="text-sm text-green-600 bg-green-50 p-3 rounded-md border border-green-100 flex items-center ">
                      <span className="mr-2">‚úÖ</span> {successMessage}
                    </div>
                  )}

                  {/* Comparaci√≥n de contenido original vs optimizado */}
                  {showComparison && optimizedContent && (
                    <div className="mb-6 border rounded-lg overflow-hidden shadow-sm">
                      <div className="bg-gray-50 px-4 py-3 border-b">
                        <h3 className="font-medium text-gray-700 flex items-center ">
                          <Sparkles className="w-4 h-4 mr-2 text-purple-500" />
                          Contenido optimizado con IA
                        </h3>
                        <p className="text-xs text-gray-500 mt-1 ">Revisa el contenido optimizado y decide si deseas aplicar los cambios.</p>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4">
                        <div className="flex flex-col h-full">
                          <h4 className="text-xs font-medium text-gray-500 mb-2 flex items-center ">
                            <span className="mr-1">üìù</span> Original
                          </h4>
                          <div className="p-3 bg-gray-50 rounded-md whitespace-pre-wrap border border-gray-100 text-gray-700 text-sm h-[250px] overflow-y-auto flex-grow  leading-relaxed">
                            {originalContent || content}
                          </div>
                        </div>
                        
                        <div className="flex flex-col h-full">
                          <h4 className="text-xs font-medium text-gray-500 mb-2 flex items-center ">
                            <span className="mr-1">‚ú®</span> Optimizado
                          </h4>
                          <div className="p-3 bg-white rounded-md whitespace-pre-wrap border border-purple-100 text-gray-800 text-sm h-[250px] overflow-y-auto flex-grow  leading-relaxed">
                            {optimizedContent}
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex justify-end gap-2 p-3 bg-gray-50 border-t">
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={handleDiscardOptimization} 
                          className="text-gray-600 "
                        >
                          Descartar
                        </Button>
                        <Button 
                          size="sm"
                          onClick={handleAcceptOptimization} 
                          className="bg-blue-600 hover:bg-blue-700 "
                        >
                          Aplicar cambios
                        </Button>
                      </div>
                    </div>
                  )}

                  {/* √Årea de texto principal - m√°s grande y prominente */}
                  {!showComparison && (
                    <>
                      <div className="relative">
                        <Textarea
                          value={content}
                          onChange={(e) => setContent(e.target.value)}
                          placeholder="Escribe tu publicaci√≥n aqu√≠..."
                          className="min-h-[250px] text-base p-4 border-gray-200 focus:border-blue-300 focus:ring-1 focus:ring-blue-300 transition-all resize-none leading-relaxed"
                        />
                      </div>

                      {/* Secci√≥n de estado y programaci√≥n - m√°s sutil */}
                      <div className="flex flex-col sm:flex-row gap-4 items-start">
                        <div className="w-full sm:w-1/3">
                          <label className="text-xs font-medium text-gray-500 mb-1 block">Estado</label>
                          <Select
                            value={state}
                            onValueChange={(value) => setState(value as PostState)}
                          >
                            <SelectTrigger className="w-full border-gray-200">
                              <SelectValue placeholder="Estado" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="borrador" className="">Borrador</SelectItem>
                              <SelectItem value="listo" className="">Listo</SelectItem>
                              <SelectItem value="planificado" className="">Planificado</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div className="w-full sm:w-2/3 flex gap-3">
                          <div className="flex-1">
                            <label className="text-xs font-medium text-gray-500 mb-1 block">Fecha</label>
                            <Popover>
                              <PopoverTrigger asChild>
                                <Button
                                  variant="outline"
                                  className={cn(
                                    "w-full justify-start text-left font-normal border-gray-200",
                                    !scheduledDate && "text-gray-400"
                                  )}
                                >
                                  <CalendarIcon className="mr-2 h-4 w-4 text-gray-400" />
                                  {scheduledDate ? format(new Date(scheduledDate), "PPP", { locale: es }) : "Seleccionar fecha"}
                                </Button>
                              </PopoverTrigger>
                              <PopoverContent className="w-auto p-0" align="start">
                                <div className="calendar-with-indicators">
                                  <Calendar
                                    mode="single"
                                    selected={scheduledDate ? new Date(scheduledDate) : undefined}
                                    onSelect={(date) => date && setScheduledDate(format(date, 'yyyy-MM-dd'))}
                                    initialFocus
                                    locale={es}
                                    modifiers={{
                                      hasScheduledPosts: (date) => hasScheduledPostsOnDate(date)
                                    }}
                                    modifiersClassNames={{
                                      hasScheduledPosts: "bg-blue-50 relative after:content-[''] after:absolute after:bottom-1 after:left-1/2 after:-translate-x-1/2 after:w-1 after:h-1 after:bg-blue-500 after:rounded-full"
                                    }}
                                    className="p-0"
                                  />
                                </div>
                              </PopoverContent>
                            </Popover>
                          </div>
                          
                          <div className="w-32">
                            <label className="text-xs font-medium text-gray-500 mb-1 block">Hora</label>
                            <div className="relative">
                              <select
                                value={scheduledTime}
                                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setScheduledTime(e.target.value)}
                                className="w-full pl-8 h-10 rounded-md border border-gray-200 bg-background"
                              >
                                <option value="" className="">Sin hora</option>
                                {Array.from({ length: 96 }, (_, i) => {
                                  const hour = Math.floor(i / 4);
                                  const minute = (i % 4) * 15;
                                  const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
                                  return (
                                    <option key={time} value={time} className="">
                                      {time}
                                    </option>
                                  );
                                })}
                              </select>
                              <Clock className="absolute left-2 top-2.5 h-4 w-4 text-gray-400 pointer-events-none" />
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Bot√≥n de IA - m√°s sutil pero atractivo */}
                      <Button
                        onClick={handleOptimizeWithAI}
                        className="w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white transition-all "
                        disabled={!content.trim() || isOptimizing || actionLoading}
                      >
                        {isOptimizing || actionLoading ? (
                          <div className="flex items-center">
                            <div className="animate-spin mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                            <span className="">Optimizando...</span>
                          </div>
                        ) : (
                          <div className="flex items-center">
                            <Sparkles className="w-4 h-4 mr-2" />
                            <span className="">Mejorar con IA</span>
                          </div>
                        )}
                      </Button>

                      {optimizationError && (
                        <div className="text-sm text-red-500 bg-red-50 p-3 rounded-md border border-red-100 flex items-center ">
                          <span className="mr-2">‚ö†Ô∏è</span> {optimizationError}
                        </div>
                      )}
                    </>
                  )}
                </div>
              </TabsContent>

              <TabsContent value="image" className="p-6 flex-1 overflow-y-auto">
                <div className="space-y-4">
                  <div>
                    <label className="text-xs font-medium text-gray-500 mb-1 block">Descripci√≥n de la imagen</label>
                    <Textarea
                      value={imagePrompt}
                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setImagePrompt(e.target.value)}
                      placeholder="Describe la imagen que deseas generar..."
                      className="mt-1 border-gray-200"
                    />
                  </div>

                  <div>
                    <label className="text-xs font-medium text-gray-500 mb-1 block">Estilo</label>
                    <Select value={selectedStyle} onValueChange={setSelectedStyle}>
                      <SelectTrigger className="w-full mt-1 border-gray-200">
                        <SelectValue placeholder="Selecciona un estilo" />
                      </SelectTrigger>
                      <SelectContent>
                        {imageStyles.map((style) => (
                          <SelectItem key={style.id} value={style.id}>
                            <div className="flex items-center gap-3 py-1">
                              <img
                                src={style.preview}
                                alt={style.name}
                                className="w-12 h-12 rounded-md object-cover"
                              />
                              <span className="font-medium">{style.name}</span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <Button
                    onClick={handleGenerateImage}
                    disabled={!imagePrompt.trim()}
                    className="w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white"
                  >
                    <ImageIcon className="w-4 h-4 mr-2" />
                    Generar Imagen
                  </Button>

                  {generatedImages.length > 0 && (
                    <div className="grid grid-cols-2 gap-4 mt-6">
                      {generatedImages.map((image) => (
                        <div key={image.id} className="relative group overflow-hidden rounded-lg">
                          <img
                            src={image.url}
                            alt={image.prompt}
                            className="w-full h-40 object-cover transition-transform group-hover:scale-105"
                          />
                          <div className="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                            <Button variant="secondary" size="sm" className="bg-white/90 hover:bg-white">
                              Seleccionar
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </TabsContent>
            </Tabs>

            {/* Footer con botones */}
            <div className="border-t p-4 flex justify-between items-center bg-gray-50">
              <Button variant="ghost" onClick={onClose} className="text-gray-600">
                Cancelar
              </Button>
              <Button
                onClick={handleSave}
                disabled={isSaving || !content.trim()}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isSaving ? (
                  <div className="flex items-center">
                    <div className="animate-spin mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                    Guardando...
                  </div>
                ) : 'Guardar'}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Di√°logo de confirmaci√≥n para guardar cambios */}
      <Dialog open={showSaveDialog} onOpenChange={setShowSaveDialog}>
        <DialogContent className="sm:max-w-[400px] bg-white shadow-lg">
          <DialogHeader>
            <DialogTitle className="text-lg font-medium text-gray-800 ">Guardar cambios</DialogTitle>
            <DialogDescription className="text-sm text-gray-500 ">
              Has realizado cambios en esta publicaci√≥n. ¬øQuieres guardarlos antes de cerrar?
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="flex justify-end gap-2 mt-4">
            <Button
              variant="outline"
              onClick={() => handleConfirmClose(false)}
              className=""
            >
              Descartar
            </Button>
            <Button
              onClick={() => handleConfirmClose(true)}
              className="bg-blue-600 hover:bg-blue-700 "
            >
              Guardar
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
} 